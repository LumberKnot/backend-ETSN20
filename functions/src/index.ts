import * as admin from "firebase-admin";
import * as ff from "firebase-functions";
import * as cloudFunctions from "./cloudFunctions";
import generateCodeWrapper from "./functions/generateCodeWrapper";
import {clearExpiredData} from "./functions/clearExpiredData";
import uploadDiagnosisKeysHttpHandler from "./functions/uploadDiagnosisKeysHttpHandler";
import {getAccessToken} from "./functions/getAccessToken";
import backupTranslations from "./functions/jobs/backupTranslations";
import getSubscriptionCode from "./functions/freeTest/getSubscriptionCode";
import updateSubscription from "./functions/freeTest/updateSubscription";
import subscriptionsForTest from "./functions/freeTest/subscriptionsForTest";
import generateSubscriptionCode from "./functions/freeTest/generateSubscriptionCode";
import getSubscription from "./functions/freeTest/getSubscription";
import uploadDiagnosisKeysSubscriber from "./functions/efgs/uploadDiagnosisKeysSubscriber";
import uploadFailedDiagnosisKeysToGENS from "./functions/efgs/uploadFailedDiagnosisKeysToGENS";
import generateCodesBatch from "./functions/generateCodesBatch";
import sendUploadedKeysOpenCensusMetricSubscriber from "./functions/metrics/sendUploadedKeysOpenCensusMetricSubscriber";
import statisticsFetchingProcessor from "./functions/statistics/StatisticsFetchingProcessor";
import processInsertingStatisticsData from "./functions/statistics/StatisticsDataInsertingProcessor";
import publishStatistics from "./functions/statistics/StatistiscPublishProcessor";
import disableCacheOnBucket from "./functions/disableCacheOnBucket";
import sendStatisticNotification from "./functions/statistics/NotificationSendingProcessor";
import insertStatisticsLastDaysData from "./functions/statistics/StatisticsInsertingLastDaysDataProcessor";

admin.initializeApp();
const {timezone} = ff.config().config;
process.env.TZ = timezone;

exports.backupTranslations = cloudFunctions.scheduler(backupTranslations, 'every 60 minutes');
exports.clearExpiredData = cloudFunctions.scheduler(clearExpiredData, 'every 30 minutes');
exports.createSubscription = cloudFunctions.httpsOnRequest(subscriptionsForTest);
exports.disableCacheOnBucket = cloudFunctions.storage(disableCacheOnBucket);
exports.generateCode = cloudFunctions.https(generateCodeWrapper);
exports.generateCodesBatch = cloudFunctions.https(generateCodesBatch);
exports.generateSubscriptionCode = cloudFunctions.httpsOnRequest(generateSubscriptionCode);
exports.getAccessToken = cloudFunctions.https(getAccessToken);
exports.getSubscription = cloudFunctions.httpsOnRequest(getSubscription);
exports.getSubscriptionCode = cloudFunctions.httpsOnRequest(getSubscriptionCode);
exports.sendUploadedKeysOpenCensusMetricSubscriber = cloudFunctions.topicSubscriber(sendUploadedKeysOpenCensusMetricSubscriber);
exports.statisticsProcessFetchingStatisticsScheduler = cloudFunctions.scheduler(statisticsFetchingProcessor, '*/10 09,10,11 * * *');
exports.statisticsProcessInsertingStatisticsDataOnceScheduler = cloudFunctions.scheduler(processInsertingStatisticsData,  '0 0 1 1 1');
exports.statisticsPublishStatistics = cloudFunctions.scheduler(publishStatistics, '*/15 10,11 * * *');
exports.statisticsSendStatisticNotification = cloudFunctions.storage(sendStatisticNotification);
exports.statisticsInsertLastDaysData = cloudFunctions.storage(insertStatisticsLastDaysData);
exports.updateSubscription = cloudFunctions.httpsOnRequest(updateSubscription);
exports.uploadDiagnosisKeys = cloudFunctions.httpsOnRequest(uploadDiagnosisKeysHttpHandler);
exports.uploadDiagnosisKeysSubscriber = cloudFunctions.topicSubscriber(uploadDiagnosisKeysSubscriber);
exports.uploadFailedDiagnosisKeysToGENSScheduler = cloudFunctions.scheduler(uploadFailedDiagnosisKeysToGENS, 'every 30 minutes');
