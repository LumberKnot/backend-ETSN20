---

name: build and deploy
on:
  release:
    types:
      - created
  push:
    tags-ignore:
      - '**'
    branches:
      - '**'

jobs:
  Setup:
    runs-on: ubuntu-latest
    outputs:
      ENVIRONMENT: ${{ env.ENVIRONMENT }}
      PUSH_MODE: ${{ env.PUSH_MODE }}
      NODE_VERSION: 12
      JAVA_VERSION: 11
    steps:
      - name: Set env to DEV
        if: github.repository_owner != 'ProteGO-Safe'
            && startsWith(github.ref, 'refs/heads/release')
            && github.event_name == 'push'
        run: |
          echo "ENVIRONMENT=DEV" >> $GITHUB_ENV

      - name: Set env to STAGE
        if: startsWith(github.ref, 'refs/tags/')
            && github.repository_owner != 'ProteGO-Safe'
            && startsWith( github.event.release.target_commitish, 'release' )
            && github.event_name == 'release'
        run: |
          echo "ENVIRONMENT=STAGE" >> $GITHUB_ENV

      - name: Set env to PROD
        if: (( startsWith(github.ref, 'refs/tags/')
            && github.repository_owner == 'ProteGO-Safe'
            && github.event.release.target_commitish == 'master'
            && github.event_name == 'release' ) ||
            ( github.repository_owner != 'ProteGO-Safe'
            && startsWith(github.ref, 'refs/heads/pre-prod/' )
            && github.event_name == 'push'))
        run: |
          echo "ENVIRONMENT=PROD" >> $GITHUB_ENV

      - name: Set env to push mode
        if: github.repository_owner != 'ProteGO-Safe'
          && startsWith(github.ref, 'refs/heads/')
          && github.event_name == 'push'
        run: |
          echo "PUSH_MODE=true" >> $GITHUB_ENV

  deploy-efgs-downloader:
    name: Deploy Efgs Downloader
    needs: Setup
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./efgs/downloader
    env:
      ENVIRONMENT: ${{ needs.Setup.outputs.ENVIRONMENT }}
      JAVA_VERSION: ${{ needs.Setup.outputs.JAVA_VERSION }}

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2

      - uses: actions/cache@v2
        env:
          cache-name: efgs-dl
        with:
          path: ~/.m2/repository
          key: ${{ env.cache-name }}-${{ hashFiles('**/efgs/downloader/pom.xml') }}
          restore-keys: ${{ env.cache-name }}-

      - name: Set Env's from Git refs.
        run: |
          echo "APPLICATION_CREDENTIALS=${{ secrets[env.SECRET_ENV] }}" >> $GITHUB_ENV
          echo "PROJECT_ID=${{ secrets[env.PROJECT_ENV] }}" >> $GITHUB_ENV
          echo "EFGS_URL=${{ secrets[env.EFGS_ENV] }}" >> $GITHUB_ENV
          echo "REGION=${{ secrets[env.REGION_ENV] }}" >> $GITHUB_ENV
        env:
          SECRET_ENV: "${{ env.ENVIRONMENT }}_FIREBASE_HOSTING_SAFE"
          PROJECT_ENV: "${{ env.ENVIRONMENT }}_FIREBASE_PROJECT"
          EFGS_ENV: "${{ env.ENVIRONMENT }}_EFGS"
          REGION_ENV: "${{ env.ENVIRONMENT }}_REGION"
        if: ${{ needs.Setup.outputs.ENVIRONMENT }}

      - name: Install java
        uses: actions/setup-java@v1
        with:
          java-version: ${{ env.JAVA_VERSION }}
          java-package: jdk
          architecture: x64

      - run: mvn dependency:tree -Dverbose -ntp
        shell: bash
        if: env.ENVIRONMENT != 'PROD' || env.ENVIRONMENT != 'STAGE'

      - name: mvn package
        run: 'mvn package -ntp -DskipTests -Ddependency-check.skip=true'
        shell: bash

      - name: mvn test
        run: 'mvn test -Ddependency-check.skip=true --log-file efgs-downloader-tests-result.txt'
        shell: bash

      - name: Archive test results
        uses: actions/upload-artifact@v2
        with:
          name: efgs-downloader-tests-result
          path: efgs/downloader/efgs-downloader-tests-result.txt

      - name: Deploy EfgsDiagnosisKeysDownloader
        uses: actions-hub/gcloud@master
        with:
          args: |
             --quiet alpha functions deploy EfgsDiagnosisKeysDownloaderScheduler \
             --source ./efgs/downloader/target/deploy \
             --entry-point org.springframework.cloud.function.adapter.gcp.GcfJarLauncher \
             --runtime java${{ env.JAVA_VERSION }} \
             --memory 2048MB  \
             --trigger-topic=firebase-schedule-sendKeysFromEfgsToGens-$REGION \
             --allow-unauthenticated \
             --region $REGION \
             --timeout=540s \
             --set-env-vars EFGS_MESSAGE_PROJECT_ID=$PROJECT_ID,STACKDRIVER_LOG_NAME=EfgsDiagnosisKeysDownloader,EFGS_MESSAGE_TOPIC_ID=firebase-subscription-uploadDiagnosisKeysSubscriber-$REGION,EFGS_API=$EFGS_URL
        if: ${{ needs.Setup.outputs.ENVIRONMENT }}

  test-efgs-uploader:
    name: Test Efgs Uploader
    runs-on: ubuntu-latest
    needs: Setup
    defaults:
      run:
        working-directory: ./efgs/uploader
    env:
      ENVIRONMENT: ${{ needs.Setup.outputs.ENVIRONMENT }}
      PUSH_MODE: ${{ needs.Setup.outputs.PUSH_MODE }}
      JAVA_VERSION: ${{ needs.Setup.outputs.JAVA_VERSION }}

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2

      - uses: actions/cache@v2
        env:
          cache-name: efgs-up
        with:
          path: ~/.m2/repository
          key: ${{ env.cache-name }}-${{ hashFiles('**/efgs/uploader/pom.xml') }}
          restore-keys: ${{ env.cache-name }}-

      - name: Set Env's to run tests for dev or stage
        run: |
          echo "EFGS_URL=${{ secrets[env.EFGS_ENV] }}" >> $GITHUB_ENV
          echo "NBBS=${{ secrets[env.NBBS_ENV] }}" >> $GITHUB_ENV
          echo "NBTLS=${{ secrets[env.NBTLS_ENV] }}" >> $GITHUB_ENV
        if: env.PUSH_MODE != 'true'
        env:
          EFGS_ENV: "${{ env.ENVIRONMENT }}_EFGS"
          NBBS_ENV: "${{ env.ENVIRONMENT }}_NBBS"
          NBTLS_ENV: "${{ env.ENVIRONMENT }}_NBTLS"

      - name: Set Env's to run tests for push mode
        run: |
          echo "EFGS_URL=${{ secrets[env.EFGS_ENV] }}" >> $GITHUB_ENV
          echo "NBBS=${{ secrets[env.NBBS_ENV] }}" >> $GITHUB_ENV
          echo "NBTLS=${{ secrets[env.NBTLS_ENV] }}" >> $GITHUB_ENV
        if: env.PUSH_MODE == 'true'
        env:
          EFGS_ENV: "DEV_EFGS"
          NBBS_ENV: "DEV_NBBS"
          NBTLS_ENV: "DEV_NBTLS"

      - name: Install java
        uses: actions/setup-java@v1
        with:
          java-version: ${{ env.JAVA_VERSION }}
          java-package: jdk
          architecture: x64

      - name: mvn test
        run: 'mvn test -Ddependency-check.skip=true --log-file efgs-uploader-tests-result.txt'
        if: env.ENVIRONMENT != 'PROD' || env.PUSH_MODE == 'true'
        shell: bash

      - name: Archive test results
        uses: actions/upload-artifact@v2
        with:
          name: efgs-uploader-tests-result
          path: efgs/uploader/efgs-uploader-tests-result.txt

  deploy-efgs-uploader:
    name: Deploy Efgs Uploader
    runs-on: ubuntu-latest
    needs: [Setup, test-efgs-uploader]
    defaults:
      run:
        working-directory: ./efgs/uploader
    env:
      ENVIRONMENT: ${{ needs.Setup.outputs.ENVIRONMENT }}
      JAVA_VERSION: ${{ needs.Setup.outputs.JAVA_VERSION }}

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2

      - uses: actions/cache@v2
        env:
          cache-name: efgs-up
        with:
          path: ~/.m2/repository
          key: ${{ env.cache-name }}-${{ hashFiles('**/efgs/uploader/pom.xml') }}
          restore-keys: ${{ env.cache-name }}-

      - name: Set Env's from Git refs.
        run: |
          echo "APPLICATION_CREDENTIALS=${{ secrets[env.SECRET_ENV] }}" >> $GITHUB_ENV
          echo "PROJECT_ID=${{ secrets[env.PROJECT_ENV] }}" >> $GITHUB_ENV
          echo "EFGS_URL=${{ secrets[env.EFGS_ENV] }}" >> $GITHUB_ENV
          echo "REGION=${{ secrets[env.REGION_ENV] }}" >> $GITHUB_ENV
          echo "DELAYER=${{ secrets[env.DELAYER_ENV] }}" >> $GITHUB_ENV
        env:
          SECRET_ENV: "${{ env.ENVIRONMENT }}_FIREBASE_HOSTING_SAFE"
          PROJECT_ENV: "${{ env.ENVIRONMENT }}_FIREBASE_PROJECT"
          EFGS_ENV: "${{ env.ENVIRONMENT }}_EFGS"
          REGION_ENV: "${{ env.ENVIRONMENT }}_REGION"
          DELAYER_ENV: "${{ env.ENVIRONMENT }}_DELAYER"
        if: ${{ needs.Setup.outputs.ENVIRONMENT }}

      - name: Install java
        uses: actions/setup-java@v1
        with:
          java-version: ${{ env.JAVA_VERSION }}
          java-package: jdk
          architecture: x64

      - run: mvn dependency:tree -Dverbose -ntp
        shell: bash
        if: env.ENVIRONMENT != 'PROD' || env.ENVIRONMENT != 'STAGE'

      - name: mvn package
        run: 'mvn package -ntp -Dmaven.test.skip=true -Ddependency-check.skip=true'
        shell: bash

      - name: Deploy EfgsDiagnosisKeysUploader to Firebase
        uses: actions-hub/gcloud@master
        with:
          args: |
             --quiet alpha functions deploy EfgsDiagnosisKeysUploaderScheduler \
             --source ./efgs/uploader/target/deploy \
             --entry-point org.springframework.cloud.function.adapter.gcp.GcfJarLauncher \
             --runtime java${{ env.JAVA_VERSION }} \
             --memory 512MB \
             --trigger-topic=firebase-schedule-sendKeysFromGensToEfgs-$REGION \
             --allow-unauthenticated \
             --region $REGION \
             --set-env-vars EFGS_PROJECT_ID=$PROJECT_ID,EFGS_EFGSAPIURL=$EFGS_URL,STACKDRIVER_LOG_NAME=EfgsDiagnosisKeysUploader,EFGS_DIAGNOSISKEYSFETCHDELAYFROMREPOSITORY=$DELAYER
        if: ${{ needs.Setup.outputs.ENVIRONMENT }}

      - name: Deploy EfgsFailedDiagnosisKeysUploader to Firebase
        uses: actions-hub/gcloud@master
        with:
          args: |
            --quiet alpha functions deploy EfgsFailedDiagnosisKeysUploaderScheduler \
            --source ./efgs/uploader/target/deploy \
            --entry-point org.springframework.cloud.function.adapter.gcp.GcfJarLauncher \
            --runtime java${{ env.JAVA_VERSION }} \
            --memory 512MB \
            --trigger-topic=firebase-schedule-sendFailedKeysFromGensToEfgs-$REGION \
            --allow-unauthenticated \
            --region $REGION \
            --set-env-vars EFGS_PROJECT_ID=$PROJECT_ID,EFGS_MODE=RETRY_KEYS,STACKDRIVER_LOG_NAME=EfgsFailedDiagnosisKeysUploader,EFGS_EFGSAPIURL=$EFGS_URL,EFGS_DIAGNOSISKEYSFETCHDELAYFROMREPOSITORY=$DELAYER
        if: ${{ needs.Setup.outputs.ENVIRONMENT }}

  Lint_TS:
    name: Lint&Audit TS Functions
    runs-on: ubuntu-latest
    needs: [Setup]
    env:
      NODE_VERSION: ${{ needs.Setup.outputs.NODE_VERSION }}
    defaults:
      run:
        working-directory: functions
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        env:
          cache-name: node
        with:
          path: ~/.npm
          key: ${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: ${{ env.cache-name }}-
      - name: Install Node
        uses: actions/setup-node@v1
        with:
          node-version: ${{ env.NODE_VERSION }}
      - run: npm update
      - run: npm install
      - run: npm run lint
      - run: npm test > nodejs-tests-result.txt
        env:
          CLOUD_RUNTIME_CONFIG: '{"config":{"region":"europe-west1"}}'
      - name: Archive test results
        uses: actions/upload-artifact@v2
        with:
          name: nodejs-tests-result
          path: functions/nodejs-tests-result.txt

  Deplot_TS:
    name: Deploy TS Functions
    needs: [Setup,Lint_TS,deploy-efgs-uploader,deploy-efgs-downloader]
    runs-on: ubuntu-latest
    if: ${{ needs.Setup.outputs.ENVIRONMENT }}
    env:
      ENVIRONMENT: ${{ needs.Setup.outputs.ENVIRONMENT }}
      NODE_VERSION: ${{ needs.Setup.outputs.NODE_VERSION }}
      
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2

      - uses: actions/cache@v2
        env:
          cache-name: node
        with:
          path: ~/.npm
          key: ${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: ${{ env.cache-name }}-

      - name: Set Env's from Git refs.
        run: |
          echo "GCP_SA_KEY=${{ secrets[env.SECRET_ENV] }}" >> $GITHUB_ENV
          echo "PROJECT_ID=${{ secrets[env.PROJECT_ENV] }}" >> $GITHUB_ENV
          echo "REGION=${{ secrets[env.REGION_ENV] }}" >> $GITHUB_ENV
          echo "SECRET_MANAGER_PATH=${{ secrets[env.SECRET_MANAGER_PATH_ENV] }}" >> $GITHUB_ENV
          echo "CDN_BUCKET=${{ secrets[env.CDN_BUCKET] }}" >> $GITHUB_ENV
          echo "TIMEZONE=${{ secrets[env.TIMEZONE] }}" >> $GITHUB_ENV
        env:
          SECRET_ENV: "${{ env.ENVIRONMENT }}_FIREBASE_HOSTING_SAFE"
          PROJECT_ENV: "${{ env.ENVIRONMENT }}_FIREBASE_PROJECT"
          EV: "${{ env.ENVIRONMENT }}_ENV"
          REGION_ENV: "${{ env.ENVIRONMENT }}_REGION"
          SECRET_MANAGER_PATH_ENV: "${{ env.ENVIRONMENT }}_SECRET_MANAGER_PATH"
          CDN_BUCKET: "${{ env.ENVIRONMENT }}_CDN_BUCKET"
          TIMEZONE: "${{ env.ENVIRONMENT }}_TIMEZONE"

      - uses: actions/setup-node@v1
        with:
          node-version: ${{ env.NODE_VERSION }}

      - run: npm --prefix functions install
      - run: npm --prefix functions audit --audit-level moderate

      - run: echo "FUNCTIONS=$(cat functions/src/index.ts | sed -n '/exports/,/cloudFunctions/p' | sed -e 's/exports\(.*\)cloudFunctions/\1/' | sed 's/ = ..*;//' | sed 's/\./functions:/g' |tr '\n' ',')" >> $GITHUB_ENV
        shell: bash

      - run: echo FUNCTIONS=$FUNCTIONS
        shell: bash
        if: env.ENVIRONMENT == 'STAGE' || env.ENVIRONMENT == 'DEV'

      - name: Set firebase envs
        uses: w9jds/firebase-action@master
        with:
          args: functions:config:set config.region=$REGION config.secretmanagerpath=$SECRET_MANAGER_PATH config.cdnbucket=$CDN_BUCKET config.timezone=$TIMEZONE --project $PROJECT_ID

      - name: Deploy to Firebase
        if: ${{ needs.Setup.outputs.ENVIRONMENT }}
        uses: w9jds/firebase-action@master
        with:
          args: deploy --only $FUNCTIONS --project $PROJECT_ID
