---

name: build and deploy
on:
  release:
    types:
      - created
  push:
    tags-ignore:
      - '**'
    branches:
      - '**'

jobs:
  deploytest:
    name: Deploy efgs-downloader
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./efgs-downloader

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2

      - name: install java 11
        uses: actions/setup-java@v1
        with:
          java-version: '11'
          java-package: jdk
          architecture: x64

      - name: check java version
        run: 'java -version'
        shell: bash

      - name: mvn package
        run: 'mvn package'
        shell: bash

      - name: copy source
        run: cp -r * ../
        shell: bash

      - name: Deploy Test to Firebase
        uses: actions-hub/gcloud@master
        env:
          PROJECT_ID: ${{secrets.DEV_FIREBASE_PROJECT}}
          APPLICATION_CREDENTIALS: ${{secrets.DEV_FIREBASE_HOSTING_SAFE}}
        with:
          args: --quiet alpha functions deploy function-sample-gcp-http --entry-point org.springframework.cloud.function.adapter.gcp.GcfJarLauncher --runtime java11 --trigger-http --source target/deploy --memory 512MB --allow-unauthenticated --region europe-west1

  deployefgs:
    name: Deploy efgs
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./efgs 

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2
        
      - name: Inject NBBS for build
        run: 'echo "${{ secrets.NBBS }}" | base64 --decode > src/nbbs'
        shell: bash
        
      - name: Inject NBTLS for build
        run: 'echo "${{ secrets.NBTLS }}" | base64 --decode > src/nbtls'
        shell: bash
        
      - name: copy source
        run: cp -r * ../
        shell: bash

      - name: Deploy EfgsDiagnosisKeysUploader to Firebase
        uses: actions-hub/gcloud@master
        env:
          PROJECT_ID: ${{secrets.DEV_FIREBASE_PROJECT}}
          APPLICATION_CREDENTIALS: ${{secrets.DEV_FIREBASE_HOSTING_SAFE}}
        with:
          args: functions deploy EfgsDiagnosisKeysUploader --entry-point pl.gov.mc.protegosafe.efgs.uploader.EfgsDiagnosisKeysUploader --runtime java11 --memory 512MB --allow-unauthenticated --region europe-west1 --trigger-event=providers/cloud.firestore/eventTypes/document.create '--trigger-resource=projects/${{secrets.DEV_FIREBASE_PROJECT}}/databases/(default)/documents/diagnosisKeys/{id}' --set-env-vars NBBS_LOCATION=./src/nbbs,NBTLS_LOCATION=./src/nbtls,EFGS_URL=https://efgs.koronazglowy.com/diagnosiskeys

      - name: Deploy EfgsDiagnosisKeysDownloader to Firebase
        uses: actions-hub/gcloud@master
        env:
          PROJECT_ID: ${{secrets.DEV_FIREBASE_PROJECT}}
          APPLICATION_CREDENTIALS: ${{secrets.DEV_FIREBASE_HOSTING_SAFE}}
        with:
          args: functions deploy EfgsDiagnosisKeysDownloader --entry-point pl.gov.mc.protegosafe.efgs.downloader.EfgsDiagnosisKeysDownloader --runtime java11 --memory 512MB --allow-unauthenticated --region europe-west1 --trigger-http --set-env-vars NBBS_LOCATION=./src/nbbs,NBTLS_LOCATION=./src/nbtls,EFGS_URL=https://efgs.koronazglowy.com/diagnosiskeys

  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: functions
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js 10
        uses: actions/setup-node@v1
        with:
          node-version: 10
      - run: npm install
      - run: npm run lint
      - run: npm test

  deploy:
    runs-on: ubuntu-latest
    if: ${{ startsWith(github.ref, 'refs/tags') || startsWith(github.ref, 'refs/heads/efgs') }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2

      - name: Set env to DEV
        if: github.repository_owner != 'ProteGO-Safe'
            && startsWith(github.ref, 'refs/heads/efgs')
            && github.event_name == 'push'
        run: |
          echo "::set-env name=ENVIRONMENT::DEV"

      - name: Set env to STAGE
        if: startsWith(github.ref, 'refs/tags/')
            &&  github.repository_owner != 'ProteGO-Safe'
            && startsWith( github.event.release.target_commitish, 'release' )
            && github.event_name == 'release'
        run: |
          echo "::set-env name=ENVIRONMENT::STAGE"

      - name: Set env to PROD
        if: startsWith(github.ref, 'refs/tags/')
            && github.repository_owner == 'ProteGO-Safe'
            && ( github.event.release.target_commitish == 'master' || startsWith( github.event.release.target_commitish, 'release/3' ))
            && github.event_name == 'release'
        run: |
          echo "::set-env name=ENVIRONMENT::PROD"

      - name: Set Env's from Git refs.
        run: |
          echo "::set-env name=SOURCE_NAME::${GITHUB_REF#refs/*/}"
          echo "::set-env name=SOURCE_BRANCH::${GITHUB_REF#refs/heads/}"
          echo "::set-env name=SOURCE_TAG::${GITHUB_REF#refs/tags/}"
          echo "::set-env name=GCP_SA_KEY::${{ secrets[env.SECRET_ENV] }}"
          echo "::set-env name=SECRET_PROJECT::${{ secrets[env.PROJECT_ENV] }}"
        env:
          SECRET_ENV: "${{ env.ENVIRONMENT }}_FIREBASE_HOSTING_SAFE"
          PROJECT_ENV: "${{ env.ENVIRONMENT }}_FIREBASE_PROJECT"
        if: env.ENVIRONMENT == 'STAGE' || env.ENVIRONMENT == 'PROD' || env.ENVIRONMENT == 'DEV'

      - name: Set Env's
        run: echo "::set-env name=PROJECT_ENVS::${{ secrets[env.EV] }}"
        env:
          EV: "${{ env.ENVIRONMENT }}_ENV"
        if: env.ENVIRONMENT == 'STAGE' || env.ENVIRONMENT == 'PROD' || env.ENVIRONMENT == 'DEV'

      - name: Inject ENV's for builds
        run: 'echo "$PROJECT_ENVS" | base64 --decode > functions/src/config.ts'
        shell: bash
        if: env.ENVIRONMENT == 'STAGE' || env.ENVIRONMENT == 'PROD' || env.ENVIRONMENT == 'DEV'

      - uses: actions/setup-node@v1
        with:
          node-version: 10

      - run: npm --prefix functions install

      - run: echo "::set-env name=FUNCTIONS::$(cat functions/src/index.ts | sed -n '/exports/,/cloudFunctions/p' | sed -e 's/exports\(.*\)cloudFunctions/\1/' | sed 's/ = ..*;//' | sed 's/\./functions:/g' |tr '\n' ',')"
        shell: bash

      - run: echo FUNCTIONS=$FUNCTIONS
        shell: bash
        if: env.ENVIRONMENT == 'STAGE' || env.ENVIRONMENT == 'DEV'

      - name: Deploy to Firebase
        if: ( env.ENVIRONMENT == 'STAGE' || env.ENVIRONMENT == 'PROD' || env.ENVIRONMENT == 'DEV' )
        uses: w9jds/firebase-action@master
        with:
          args: deploy --only $FUNCTIONS --project $SECRET_PROJECT
