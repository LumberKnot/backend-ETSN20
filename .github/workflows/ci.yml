---

name: build and deploy
on:
  release:
    types:
      - created
  push:
    tags-ignore:
      - '**'
    branches:
      - '**'

jobs:
  deploy-efgs-downloader:
    name: Deploy Efgs Downloader
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags') ||
      startsWith(github.ref, 'refs/heads/release') ||
      startsWith(github.ref, 'refs/heads/pre-prod/')
    defaults:
      run:
        working-directory: ./efgs-downloader

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2
        
      - name: Set env to DEV
        if: github.repository_owner != 'ProteGO-Safe'
            && startsWith(github.ref, 'refs/heads/release')
            && github.event_name == 'push'
        run: |
          echo "ENVIRONMENT=DEV" >> $GITHUB_ENV
          
      - name: Set env to STAGE
        if: startsWith(github.ref, 'refs/tags/')
            && github.repository_owner != 'ProteGO-Safe'
            && startsWith( github.event.release.target_commitish, 'release' )
            && github.event_name == 'release'
        run: |
          echo "ENVIRONMENT=STAGE" >> $GITHUB_ENV
          
      - name: Set env to PROD
        if: (( startsWith(github.ref, 'refs/tags/') 
            && github.repository_owner == 'ProteGO-Safe' 
            && github.event.release.target_commitish == 'master' 
            && github.event_name == 'release' ) ||
            ( github.repository_owner != 'ProteGO-Safe' 
            && startsWith(github.ref, 'refs/heads/pre-prod/' )
            && github.event_name == 'push'))
        run: |
          echo "ENVIRONMENT=PROD" >> $GITHUB_ENV
          
      - name: Set Env's from Git refs.
        run: |
          echo "APPLICATION_CREDENTIALS=${{ secrets[env.SECRET_ENV] }}" >> $GITHUB_ENV
          echo "PROJECT_ID=${{ secrets[env.PROJECT_ENV] }}" >> $GITHUB_ENV
          echo "NBBS_CERT=${{ secrets[env.NBBS_ENV] }}" >> $GITHUB_ENV
          echo "NBTLS_CERT=${{ secrets[env.NBTLS_ENV] }}" >> $GITHUB_ENV
          echo "EFGS_URL=${{ secrets[env.EFGS_ENV] }}" >> $GITHUB_ENV
        env:
          SECRET_ENV: "${{ env.ENVIRONMENT }}_FIREBASE_HOSTING_SAFE"
          PROJECT_ENV: "${{ env.ENVIRONMENT }}_FIREBASE_PROJECT"
          NBBS_ENV: "${{ env.ENVIRONMENT }}_NBBS"
          NBTLS_ENV: "${{ env.ENVIRONMENT }}_NBTLS"
          EFGS_ENV: "${{ env.ENVIRONMENT }}_EFGS"
        if: env.ENVIRONMENT == 'STAGE' || env.ENVIRONMENT == 'PROD' || env.ENVIRONMENT == 'DEV'

      - name: Install java 11
        uses: actions/setup-java@v1
        with:
          java-version: '11'
          java-package: jdk
          architecture: x64

#     STH TO DO!!!
      - name: mvn OWASP
        run: mvn -DfailBuildOnCVSS=5 org.owasp:dependency-check-maven:6.0.3:check
        shell: bash

      - name: mvn package
        run: 'mvn package'
        shell: bash

      - name: Inject NBBS for build
        run: '[[ -z "${NBBS_CERT}" ]] && NBBS_CERT="${{ secrets.NBBS }}" || NBBS_CERT="${NBBS_CERT}" ; echo "$NBBS_CERT" | base64 --decode > target/deploy/nbbs_eu'
        shell: bash

      - name: Inject NBTLS for build
        run: '[[ -z "${NBTLS_CERT}" ]] && NBTLS_CERT="${{ secrets.NBTLS }}" || NBTLS_CERT="${NBTLS_CERT}" ; echo "$NBTLS_CERT" | base64 --decode > target/deploy/nbtls_eu'
        shell: bash

      - name: Deploy EfgsDiagnosisKeysDownloader
        uses: actions-hub/gcloud@master
        with:
          args: |
             --quiet alpha functions deploy EfgsDiagnosisKeysDownloaderScheduler \
             --source ./efgs-downloader/target/deploy \
             --entry-point org.springframework.cloud.function.adapter.gcp.GcfJarLauncher \
             --runtime java11 \
             --memory 2048MB  \
             --trigger-topic=firebase-schedule-sendKeysFromEfgsToGens-europe-west1 \
             --allow-unauthenticated \
             --region europe-west1 \
             --timeout=540s \
             --set-env-vars EFGS_MESSAGE_PROJECT_ID=$PROJECT_ID,EFGS_API=$EFGS_URL

  deploy-efgs-uploader:
    name: Deploy Efgs Uploader
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags') ||
      startsWith(github.ref, 'refs/heads/release') ||
      startsWith(github.ref, 'refs/heads/pre-prod/')
    defaults:
      run:
        working-directory: ./efgs

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2

      - name: Set env to DEV
        if: github.repository_owner != 'ProteGO-Safe'
            && startsWith(github.ref, 'refs/heads/release')
            && github.event_name == 'push'
        run: |
          echo "ENVIRONMENT=DEV" >> $GITHUB_ENV
          
      - name: Set env to STAGE
        if: startsWith(github.ref, 'refs/tags/')
            && github.repository_owner != 'ProteGO-Safe'
            && startsWith( github.event.release.target_commitish, 'release' )
            && github.event_name == 'release'
        run: |
          echo "ENVIRONMENT=STAGE" >> $GITHUB_ENV
          
      - name: Set env to PROD
        if: >-
          (( startsWith(github.ref, 'refs/tags/') 
          && github.repository_owner == 'ProteGO-Safe' 
          && github.event.release.target_commitish == 'master' 
          && github.event_name == 'release' ) ||
          ( github.repository_owner != 'ProteGO-Safe' 
          && startsWith(github.ref, 'refs/heads/pre-prod/' )
          && github.event_name == 'push'))
        run: |
          echo "ENVIRONMENT=PROD" >> $GITHUB_ENV
          
      - name: Set Env's from Git refs.
        run: |
          echo "APPLICATION_CREDENTIALS=${{ secrets[env.SECRET_ENV] }}" >> $GITHUB_ENV
          echo "PROJECT_ID=${{ secrets[env.PROJECT_ENV] }}" >> $GITHUB_ENV
          echo "NBBS_CERT=${{ secrets[env.NBBS_ENV] }}" >> $GITHUB_ENV
          echo "NBTLS_CERT=${{ secrets[env.NBTLS_ENV] }}" >> $GITHUB_ENV
          echo "EFGS_URL=${{ secrets[env.EFGS_ENV] }}" >> $GITHUB_ENV
        env:
          SECRET_ENV: "${{ env.ENVIRONMENT }}_FIREBASE_HOSTING_SAFE"
          PROJECT_ENV: "${{ env.ENVIRONMENT }}_FIREBASE_PROJECT"
          NBBS_ENV: "${{ env.ENVIRONMENT }}_NBBS"
          NBTLS_ENV: "${{ env.ENVIRONMENT }}_NBTLS"
          EFGS_ENV: "${{ env.ENVIRONMENT }}_EFGS"
        if: env.ENVIRONMENT == 'STAGE' || env.ENVIRONMENT == 'PROD' || env.ENVIRONMENT == 'DEV'

      - name: mvn OWASP
        run: mvn -DfailBuildOnCVSS=5 org.owasp:dependency-check-maven:6.0.3:check
        shell: bash

      - name: Inject NBBS for build
        run: '[[ -z "${NBBS_CERT}" ]] && NBBS_CERT="${{ secrets.NBBS }}" || NBBS_CERT="${NBBS_CERT}" ; echo "$NBBS_CERT" | base64 --decode > src/nbbs'
        shell: bash

      - name: Inject NBTLS for build
        run: '[[ -z "${NBTLS_CERT}" ]] && NBTLS_CERT="${{ secrets.NBTLS }}" || NBTLS_CERT="${NBTLS_CERT}" ; echo "$NBTLS_CERT" | base64 --decode > src/nbtls'
        shell: bash

      - name: Deploy EfgsDiagnosisKeysUploader to Firebase
        uses: actions-hub/gcloud@master
        with:
          args: |
             functions deploy EfgsDiagnosisKeysUploaderScheduler \
             --source=./efgs \
             --entry-point pl.gov.mc.protegosafe.efgs.uploader.EfgsDiagnosisKeysUploader \
             --runtime java11 \
             --memory 512MB \
             --allow-unauthenticated \
             --region europe-west1 \
             --trigger-topic=firebase-schedule-sendKeysFromGensToEfgs-europe-west1 \
             --set-env-vars NBBS_LOCATION=./src/nbbs,NBTLS_LOCATION=./src/nbtls,EFGS_URL=$EFGS_URL,PROJECT_ID=$PROJECT_ID

  Lint_TS:
    name: Lint&Audit TS Functions
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: functions
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js 10
        uses: actions/setup-node@v1
        with:
          node-version: 10
      - run: npm install
      - run: npm run lint
      - run: npm audit --audit-level moderate
      - run: npm test

  Deplot_TS:
    name: Deploy TS Functions
    needs: [Lint_TS,deploy-efgs-uploader,deploy-efgs-downloader]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags') ||
        startsWith(github.ref, 'refs/heads/release') || 
        startsWith(github.ref, 'refs/heads/pre-prod/')
      
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2

      - name: Set env to DEV
        if: github.repository_owner != 'ProteGO-Safe'
            && startsWith(github.ref, 'refs/heads/release')
            && github.event_name == 'push'
        run: |
          echo "ENVIRONMENT=DEV" >> $GITHUB_ENV

      - name: Set env to STAGE
        if: startsWith(github.ref, 'refs/tags/')
            && github.repository_owner != 'ProteGO-Safe'
            && startsWith( github.event.release.target_commitish, 'release' )
            && github.event_name == 'release'
        run: |
          echo "ENVIRONMENT=STAGE" >> $GITHUB_ENV

      - name: Set env to PROD
        if: (( startsWith(github.ref, 'refs/tags/') 
            && github.repository_owner == 'ProteGO-Safe' 
            && github.event.release.target_commitish == 'master' 
            && github.event_name == 'release' ) ||
            ( github.repository_owner != 'ProteGO-Safe' 
            && startsWith(github.ref, 'refs/heads/pre-prod/' )
            && github.event_name == 'push'))
        run: |
          echo "ENVIRONMENT=PROD" >> $GITHUB_ENV

      - name: Set Env's from Git refs.
        run: |
          echo "GCP_SA_KEY=${{ secrets[env.SECRET_ENV] }}" >> $GITHUB_ENV
          echo "PROJECT_ID=${{ secrets[env.PROJECT_ENV] }}" >> $GITHUB_ENV
          echo "PROJECT_ENVS=${{ secrets[env.EV] }}" >> $GITHUB_ENV
        env:
          SECRET_ENV: "${{ env.ENVIRONMENT }}_FIREBASE_HOSTING_SAFE"
          PROJECT_ENV: "${{ env.ENVIRONMENT }}_FIREBASE_PROJECT"
          EV: "${{ env.ENVIRONMENT }}_ENV"
        if: env.ENVIRONMENT == 'STAGE' || env.ENVIRONMENT == 'PROD' || env.ENVIRONMENT == 'DEV'

      - name: Inject ENV's for builds
        run: 'echo "$PROJECT_ENVS" | base64 --decode > functions/src/config.ts'
        shell: bash
        if: env.ENVIRONMENT == 'STAGE' || env.ENVIRONMENT == 'PROD' || env.ENVIRONMENT == 'DEV'

      - uses: actions/setup-node@v1
        with:
          node-version: 10

      - run: npm --prefix functions install
      - run: npm --prefix functions audit --audit-level moderate

      - run: echo "FUNCTIONS=$(cat functions/src/index.ts | sed -n '/exports/,/cloudFunctions/p' | sed -e 's/exports\(.*\)cloudFunctions/\1/' | sed 's/ = ..*;//' | sed 's/\./functions:/g' |tr '\n' ',')" >> $GITHUB_ENV
        shell: bash

      - run: echo FUNCTIONS=$FUNCTIONS
        shell: bash
        if: env.ENVIRONMENT == 'STAGE' || env.ENVIRONMENT == 'DEV'

      - name: Deploy to Firebase
        if: ( env.ENVIRONMENT == 'STAGE' || env.ENVIRONMENT == 'PROD' || env.ENVIRONMENT == 'DEV' )
        uses: w9jds/firebase-action@master
        with:
          args: deploy --only $FUNCTIONS --project $PROJECT_ID
