--- 
name: Schedule test
on:
  schedule:
    - cron: '0 9 * * *'

jobs:
  Setup:
    runs-on: ubuntu-latest
    if: github.repository_owner != 'ProteGO-Safe' && github.event_name == 'schedule' 
    outputs:
      ENVIRONMENT: ${{ env.ENVIRONMENT }}
      NODE_VERSION: 12
      JAVA_VERSION: 11
      BRANCH_MATRIX: ${{ env.BRANCH_MATRIX }}
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set env to SCHEDULE
        run: |
          echo "ENVIRONMENT=SCHEDULE" >> $GITHUB_ENV

      - name: Set matrix branch
        id: set-matrix
        run: |
          last_releases=$(git branch -a --format='%(refname:short)' --sort=-committerdate |sed -e 's|origin/||g;' | grep release | head -n 1)
          last_active=$(git branch -a --format='%(refname:short)' --sort=-committerdate |sed -e 's|origin/||g; /HEAD/d; /release/d; /snyk/d; /master/d; /dependabot/d;' | head -n 3)
          matrix="$last_releases $last_active master"
          matrix=$(printf '%s\n' $matrix | sort | uniq | jq --slurp --raw-input 'split("\n")[:-1]')
          echo "BRANCH_MATRIX=$(echo $matrix)" >> $GITHUB_ENV

  efgs-downloader-build:
    name: Efgs Downloader Build
    if: ${{ needs.Setup.outputs.ENVIRONMENT }}
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix: 
        branches: ${{ fromJson(needs.Setup.outputs.BRANCH_MATRIX) }}
    needs: Setup
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./efgs/downloader
    env:
      ENVIRONMENT: ${{ needs.Setup.outputs.ENVIRONMENT }}
      JAVA_VERSION: ${{ needs.Setup.outputs.JAVA_VERSION }}

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2
        with:
          ref: ${{ matrix.branches }}

      - uses: actions/cache@v2
        env:
          cache-name: efgs-dl
        with:
          path: ~/.m2/repository
          key: ${{ env.cache-name }}-${{ hashFiles('**/efgs/downloader/pom.xml') }}
          restore-keys: ${{ env.cache-name }}-

      - name: Install java
        uses: actions/setup-java@v1
        with:
          java-version: ${{ env.JAVA_VERSION }}
          java-package: jdk
          architecture: x64

      - run: mvn dependency:tree -Dverbose -ntp
        shell: bash

      - name: mvn package
        run: 'mvn package -ntp -DskipTests'
        shell: bash

      - name: mvn test
        run: 'mvn test'
        shell: bash

  efgs-uploader-build:
    name: Efgs Uploader Build
    continue-on-error: true
    if: ${{ needs.Setup.outputs.ENVIRONMENT }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: 
         branches: ${{ fromJson(needs.Setup.outputs.BRANCH_MATRIX) }}
    needs: Setup
    defaults:
      run:
        working-directory: ./efgs/uploader
    env:
      ENVIRONMENT: ${{ needs.Setup.outputs.ENVIRONMENT }}
      JAVA_VERSION: ${{ needs.Setup.outputs.JAVA_VERSION }}

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2
        with:
          ref: ${{ matrix.branches }}

      - uses: actions/cache@v2
        env:
          cache-name: efgs-up
        with:
          path: ~/.m2/repository
          key: ${{ env.cache-name }}-${{ hashFiles('**/efgs/uploader/pom.xml') }}
          restore-keys: ${{ env.cache-name }}-

      - name: Set Env's to run tests for schedule mode
        run: |
          echo "EFGS_URL=${{ secrets[env.EFGS_ENV] }}" >> $GITHUB_ENV
          echo "NBBS=${{ secrets[env.NBBS_ENV] }}" >> $GITHUB_ENV
          echo "NBTLS=${{ secrets[env.NBTLS_ENV] }}" >> $GITHUB_ENV
        if: env.ENVIRONMENT == 'SCHEDULE'
        env:
          EFGS_ENV: "DEV_EFGS"
          NBBS_ENV: "DEV_NBBS"
          NBTLS_ENV: "DEV_NBTLS"

      - name: Install java
        uses: actions/setup-java@v1
        with:
          java-version: ${{ env.JAVA_VERSION }}
          java-package: jdk
          architecture: x64

      - run: mvn dependency:tree -Dverbose -ntp
        shell: bash

      - name: mvn package
        run: 'mvn package -ntp -Dmaven.test.skip=true'
        shell: bash

      - name: mvn test
        run: 'mvn test'
        shell: bash

  Lint_TS:
    name: Lint&Audit TS Functions
    if: ${{ needs.Setup.outputs.ENVIRONMENT }}
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix: 
         branches: ${{ fromJson(needs.Setup.outputs.BRANCH_MATRIX) }}
    runs-on: ubuntu-latest
    needs: [Setup]
    env:
      NODE_VERSION: ${{ needs.Setup.outputs.NODE_VERSION }}
    defaults:
      run:
        working-directory: functions
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ matrix.branches }}
          
      - uses: actions/cache@v2
        env:
          cache-name: node
        with:
          path: ~/.npm
          key: ${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: ${{ env.cache-name }}-
      - name: Install Node
        uses: actions/setup-node@v1
        with:
          node-version: ${{ env.NODE_VERSION }}
      - run: npm update
      - run: npm install
      - run: npm run lint
      - run: npm audit --audit-level moderate
      - run: npm test
        env:
          CLOUD_RUNTIME_CONFIG: '{"config":{"region":"europe-west1"}}'

  notify:
    if: ${{ needs.Setup.outputs.ENVIRONMENT }} && always()
    name: Notify
    needs:
      - Lint_TS
      - efgs-uploader-build
      - efgs-downloader-build
      - Setup
    runs-on: ubuntu-latest
    steps:
      - name: Prepare Slack message
        id: status
        uses: actions/github-script@v3
        with:
          script: |
            ////////////////////////////////////
            // retrieve workflow run data
            ////////////////////////////////////
            console.log("get workflow run")
            const wf_run = await github.actions.getWorkflowRun({
                owner: context.repo.owner,
                repo: context.repo.repo,
                run_id: ${{ github.run_id }}
            })
            console.log(wf_run.data)
            console.log("get jobs for workflow run:", wf_run.data.jobs_url)
            const jobs_response = await github.request(wf_run.data.jobs_url)
            ////////////////////////////////////
            // build slack notification message
            ////////////////////////////////////
            // some utility functions
            var date_diff_func = function(start, end) {
                var duration = end - start
                // format the duration
                var delta = duration / 1000
                var days = Math.floor(delta / 86400)
                delta -= days * 86400
                var hours = Math.floor(delta / 3600) % 24
                delta -= hours * 3600
                var minutes = Math.floor(delta / 60) % 60
                delta -= minutes * 60
                var seconds = Math.floor(delta % 60)
                var format_func = function(v, text, check) {
                    if (v <= 0 && check) {
                        return ""
                    } else {
                        return v + text
                    }
                }
                return format_func(days, "d", true) + format_func(hours, "h", true) + format_func(minutes, "m", true) + format_func(seconds, "s", false)
            }
            var status_icon_func = function(s) {
                switch (s) {
                case "w_success":
                    return ":white_check_mark:"
                case "w_failure":
                    return ":no_entry:"
                case "w_cancelled":
                    return ":warning:"
                case "success":
                    return "\u2713"
                case "failure":
                    return "\u2717"
                default:
                    return "\u20e0"
                }
            }
            const commit = "${{ github.sha }}".substr(0, 6)
            var pr = ""
            for (p of wf_run.data.pull_requests) {
              pr += ",<"+ p.url + "|#" + p.number + ">"
            }
            if (pr != "") {
              pr = "for " + pr.substr(1)
            }
            // build the message
            var fields = []
            var is_wf_success = true
            var is_wf_failure = false
            for (j of jobs_response.data.jobs) {
                console.log(j.name, ":", j.status, j.conclusion, j.started_at, j.completed_at)
                // ignore the current job running this script
                if (j.status != "completed") {
                    continue
                }
                if (!(j.conclusion == "skipped" || j.conclusion == "success")) {
                  is_wf_success = false
                }
                if (j.conclusion == "failure") {
                  is_wf_failure = true
                  fields.push({
                    type: "mrkdwn",
                    text: status_icon_func(j.conclusion) + " <" + j.html_url + "|" + j.name + ">\n  \u21b3 completed in " + date_diff_func(new Date(j.started_at), new Date(j.completed_at))
                  })
                }
            }
            var workflow_status = "w_cancelled"
            if (is_wf_success) {
              workflow_status = "w_success"
              var slack_msg = {
                blocks: [
                    {
                        type: "section",
                        text: {
                            type: "mrkdwn",
                            text: "<https://github.com/${{ github.repository }}|*${{ github.repository }}*>\nfrom *${{ github.ref }}@" + commit + "*"
                        }
                    },
                    {
                        type: "section",
                        text: {
                            type: "mrkdwn",
                            text: status_icon_func(workflow_status) + " *${{ github.workflow }}* " + pr + "\nWorkflow run <" + wf_run.data.html_url + "|#${{ github.run_number }}> completed in " + date_diff_func(new Date(wf_run.data.created_at), new Date(wf_run.data.updated_at))
                        }
                    }
                ]
            }
            
            } else if (is_wf_failure) {
              workflow_status = "w_failure"
              var slack_msg = {
                blocks: [
                    {
                        type: "section",
                        text: {
                            type: "mrkdwn",
                            text: "<https://github.com/${{ github.repository }}|*${{ github.repository }}*>\nfrom *${{ github.ref }}@" + commit + "*"
                        }
                    },
                    {
                        type: "section",
                        text: {
                            type: "mrkdwn",
                            text: status_icon_func(workflow_status) + " *${{ github.workflow }}* " + pr + "\nWorkflow run <" + wf_run.data.html_url + "|#${{ github.run_number }}> completed in " + date_diff_func(new Date(wf_run.data.created_at), new Date(wf_run.data.updated_at))
                        }
                    },
                    {
                        type: "divider"
                    },
                    {
                        type: "section",
                        fields: fields
                    }
                ]
            }
            }

            return slack_msg

      - name: Send to Slack
        if: success()
        run: |
          curl -X POST ${{ secrets.SLACK_WEBHOOK_URL }} -H "Content-type: application/json" --data '${{ steps.status.outputs.result }}'
